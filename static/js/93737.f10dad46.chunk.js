"use strict";(self.webpackChunkn2_station=self.webpackChunkn2_station||[]).push([[93737],{19358:(t,h,e)=>{e.d(h,{A:()=>s});var i=e(59422);class s{constructor(t,h,e,s){this.transformedX=0,this.transformedY=0,this.center=(0,i.fA)(t,h),this.centerT=(0,i.vt)(),this.halfWidth=e/2,this.halfHeight=s/2,this.width=e,this.height=s}get x(){return this.center[0]}get y(){return this.center[1]}get blX(){return this.center[0]+this.halfWidth}get blY(){return this.center[1]+this.halfHeight}get trX(){return this.center[0]-this.halfWidth}get trY(){return this.center[1]-this.halfHeight}get xmin(){return this.x-this.halfWidth}get xmax(){return this.x+this.halfWidth}get ymin(){return this.y-this.halfHeight}get ymax(){return this.y+this.halfHeight}set x(t){this.center[0]=t}set y(t){this.center[1]=t}clone(){return new s(this.x,this.y,this.width,this.height)}serialize(t){return t.writeF32(this.center[0]),t.writeF32(this.center[1]),t.push(this.width),t.push(this.height),t}findCollisionDelta(t){let h=arguments.length>1&&void 0!==arguments[1]?arguments[1]:4;const e=Math.abs(t.centerT[0]-this.centerT[0]),i=Math.abs(t.centerT[1]-this.centerT[1]),s=(t.halfWidth+this.halfWidth+h)/e,n=(t.halfHeight+this.halfHeight+h)/i,r=Math.min(s,n);return Math.log2(r)}extend(t){const h=Math.min(this.xmin,t.xmin),e=Math.min(this.ymin,t.ymin),i=Math.max(this.xmax,t.xmax)-h,s=Math.max(this.ymax,t.ymax)-e,n=h+i/2,r=e+s/2;this.width=i,this.height=s,this.halfWidth=i/2,this.halfHeight=s/2,this.x=n,this.y=r}static deserialize(t){const h=t.readF32(),e=t.readF32(),i=t.readInt32(),n=t.readInt32();return new s(h,e,i,n)}}},39216:(t,h,e)=>{e.r(h),e.d(h,{convertToCIMSymbol:()=>r});var i=e(50076),s=e(89465),n=e(401);function r(t){const h=(0,n.Vb)(t);if(!h)throw new i.default("cimConversionUtils.convertToCIMSymbol","Unable to convert this symbol to CIM");return new s.default({data:h})}}}]);
//# sourceMappingURL=93737.f10dad46.chunk.js.map